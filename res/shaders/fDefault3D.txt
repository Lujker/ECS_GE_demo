#version 430

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
}; 

struct Light {
    vec4 LightColor;
    vec3 LightPosition;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light; 
uniform Material material;
uniform vec3 CameraPos;

in vec2 textureCoord;
in vec3 Normal;
in vec3 FragPos;

out vec4 frag_color;

void main() {
    // Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.LightPosition - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    // Specul
    vec3 viewDir = normalize(CameraPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, textureCoord));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, textureCoord));  
    vec3 specular = light.specular * spec * vec3(texture(material.specular, textureCoord));
    frag_color = vec4(ambient + diffuse + specular, 1.0);
}
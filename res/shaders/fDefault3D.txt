#version 430

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec4 LightColor;
    vec3 LightPosition;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


in vec2 textureCoord;
in vec3 Normal;
in vec3 FragPos;

out vec4 frag_color;

uniform Light light; 
uniform Material material;
uniform sampler2D TextureID;
uniform vec3 CameraPos;

void main() {
    // Ambient
    float specularStrength = 0.5f;
    vec4 ambient = vec4(light.ambient * material.ambient, 1.0f) * light.LightColor;
    ambient = vec4(ambient.x, ambient.y, ambient.z, light.LightColor.w);

    // Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.LightPosition - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec4 diffuse = (diff * vec4( light.diffuse * material.diffuse, 1.0f)) * light.LightColor;
    diffuse = vec4(diffuse.x, diffuse.y, diffuse.z, light.LightColor.w);
    // Specul
    vec3 viewDir = normalize(CameraPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec4 specular = (vec4(light.specular * material.specular, 1.0f) * spec) * light.LightColor;  
    specular = vec4(specular.x, specular.y, specular.z, light.LightColor.w);

   frag_color = (ambient + diffuse + specular) * texture(TextureID, textureCoord);
}
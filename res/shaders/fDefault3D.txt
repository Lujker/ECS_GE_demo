#version 430

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
}; 

struct PointLight {
    vec4 LightColor;
    vec3 LightPosition;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float constant;
    float linear;
    float quadratic;
};

struct DirectionLight
{
    vec4 LightColor;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define NR_POINT_LIGHTS 16 
uniform PointLight      pointLights[NR_POINT_LIGHTS];
uniform DirectionLight  dirLight;
uniform Material        material;
uniform vec3            CameraPos;
uniform int           pointsLightsCount;

in vec2                 textureCoord;
in vec3                 Normal;
in vec3                 FragPos;

out vec4                frag_color;

vec3 CalcDirLight(DirectionLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // диффузное освещение
    float diff = max(dot(normal, lightDir), 0.0);
    // освещение зеркальных бликов
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // комбинируем результаты
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, textureCoord));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, textureCoord));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, textureCoord));
    return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.LightPosition - fragPos);
    // диффузное освещение
    float diff = max(dot(normal, lightDir), 0.0);
    // освещение зеркальных бликов
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // затухание
    float distance    = length(light.LightPosition - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // комбинируем результаты
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, textureCoord));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, textureCoord));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, textureCoord));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 

void main() {
        // свойства
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(CameraPos - FragPos);

    // фаза 1: Направленный источник освещения
    vec3 result = CalcDirLight(dirLight, norm, viewDir);
    // фаза 2: Точечные источники
    for(int i = 0; i < pointsLightsCount; i++)
        result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);    
    // фаза 3: фонарик
    //result += CalcSpotLight(spotLight, norm, FragPos, viewDir);    
    
    frag_color = vec4(result, 1.0);
}